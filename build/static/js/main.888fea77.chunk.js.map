{"version":3,"sources":["services/measurements.js","hooks/useMeasurementsApi.js","components/EditableCell.js","components/MeasurementGrid.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","addNew","measurement","a","axios","post","response","console","log","del","id","delete","update","put","concat","getAll","get","useMeasurementsApi","initialStatus","useState","measurements","setMeasurements","getMeasurements","msrmntService","res","data","useEffect","updateMeasurements","propTypes","PropTypes","arrayOf","object","EditableCell","errors","props","Cell","React","Children","map","children","child","cloneElement","disabled","tableRow","rowId","columns","name","title","editable","number","MeasurementGrid","handleEdit","handleDelete","handleSubmitNew","editingRowIds","setEditingRowIds","deletedRowIds","setDeletedRowIds","columnName","editingEnabled","editingStateColumnExtensions","setErrors","validation","useCallback","debounce","edited","validate","rows","row","some","column","undefined","isNumber","onEditingRowIdsChange","onRowChangesChange","value","onDeletedRowIdsChange","onCommitChanges","added","changed","deleted","changedRows","deletable","forEach","push","onAddedRowsChange","Object","assign","columnExtensions","cellComponent","showAddCommand","showEditCommand","showDeleteCommand","defaultProps","Container","styled","div","MainHeader","h2","App","msrmnt","handleChanges","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.888fea77.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/measurements/'\r\n\r\nconst addNew = async measurement => {\r\n  try {\r\n    const response = await axios.post(baseUrl, measurement)\r\n    \r\n    return response\r\n  } catch(e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\nconst del = async id => {\r\n  try {\r\n    const response = await axios.delete(baseUrl + id)\r\n\r\n    return response\r\n  } catch(e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\nconst update = async measurement => {\r\n  try {\r\n    const response = await axios.put(baseUrl.concat(measurement.id), measurement)\r\n    return response\r\n  } catch(e) {\r\n    console.log(e)\r\n  }\r\n}\r\n\r\nconst getAll = async () => {\r\n  const response = await axios.get(baseUrl)\r\n  return response\r\n}\r\n\r\nexport default {\r\n  addNew,\r\n  del,\r\n  update,\r\n  getAll\r\n}","import { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport msrmntService from '../services/measurements'\r\n\r\nfunction useMeasurementsApi(initialStatus = [] ) {\r\n  const [measurements, setMeasurements] = useState(initialStatus)\r\n  \r\n  const getMeasurements = async () => {\r\n    const res = await msrmntService.getAll()\r\n    setMeasurements(res.data)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getMeasurements()\r\n  }, [])\r\n\r\n  const updateMeasurements = () => {\r\n    getMeasurements()\r\n  }\r\n\r\n  return [\r\n    measurements,\r\n    updateMeasurements\r\n  ]\r\n}\r\n\r\nuseMeasurementsApi.propTypes = {\r\n  initialStatus: PropTypes.arrayOf(PropTypes.object)\r\n}\r\n\r\nexport default useMeasurementsApi\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TableEditColumn } from '@devexpress/dx-react-grid-material-ui'\r\n\r\nfunction EditableCell({ errors, ...props }) {\r\n  return (\r\n    <TableEditColumn.Cell {...props}>\r\n      {React.Children.map(props.children, child =>\r\n        child && child.props.id === 'commit'\r\n          ? React.cloneElement(child, { disabled: errors[props.tableRow.rowId] })\r\n          : child,\r\n      )}\r\n    </TableEditColumn.Cell>\r\n  );\r\n}\r\n\r\nEditableCell.propTypes = {\r\n  errors: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default EditableCell\r\n","import React, { useState, useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { \r\n  Grid,\r\n  Table,\r\n  TableHeaderRow,\r\n  TableEditRow,\r\n  TableEditColumn\r\n} from '@devexpress/dx-react-grid-material-ui'\r\nimport { EditingState } from '@devexpress/dx-react-grid';\r\nimport EditableCell from './EditableCell';\r\nimport { map } from 'rambda'\r\nimport isNumber from 'validator/lib/isNumeric'\r\nimport debounce from 'lodash.debounce'\r\n\r\n\r\nconst columns = [\r\n  { name: 'id', title: 'Tunnus' },\r\n  { name: 'name', title: 'Mittaus', editable: true },\r\n  { name: 'quantity', title: 'MittayksikkÃ¶', editable: true },\r\n  { name: 'referenceValueLower', title: 'Alempi viitearvo', editable: true, number: true },\r\n  { name: 'referenceValueUpper', title: 'Ylempi viitearvo', editable: true, number: true },\r\n]\r\n\r\nfunction MeasurementGrid({ \r\n  data,\r\n  handleEdit,\r\n  handleDelete,\r\n  handleSubmitNew,\r\n}) {\r\n\r\n  const [editingRowIds, setEditingRowIds] = useState([])\r\n  const [deletedRowIds, setDeletedRowIds] = useState([])\r\n  const [editingStateColumnExtensions] = useState([\r\n    { columnName: 'id', editingEnabled: false}\r\n  ])\r\n  const [errors, setErrors] = useState({})\r\n\r\n  const validation = useCallback(debounce(edited => {\r\n    const errors = validate(edited, columns);\r\n    setErrors(errors)\r\n  }, 200), [])\r\n\r\n  const commitChanges = ({ added, changed, deleted }) => {\r\n    let changedRows = []\r\n    let deletable = []\r\n\r\n    if (added) {\r\n      added.forEach(row => {\r\n        handleSubmitNew(row)\r\n      })\r\n    }\r\n    if (changed) {\r\n      data.map(row => {\r\n        if (changed[row.id-1]) changedRows.push({ ...row, ...changed[row.id-1] })\r\n      })\r\n    }\r\n    if (deleted) {\r\n      deletable = deleted.map(row => {\r\n        return data[row]\r\n      })\r\n    }\r\n\r\n    changedRows.forEach(row => {\r\n      handleEdit(row)\r\n    })\r\n    deletable.forEach(row => {\r\n      handleDelete(row)\r\n    })\r\n  }\r\n\r\n  const validate = (rows, columns) => {\r\n    const errors = map(row => \r\n      columns.some(column => \r\n        column.number \r\n        && row[column.name] !== undefined \r\n        && !isNumber(row[column.name])), \r\n        rows)\r\n    \r\n    return errors\r\n  }\r\n\r\n  const changeAddedRows = value => {\r\n    validation(Object.assign({}, value))\r\n  }\r\n\r\n  const onEdited = (value) => {\r\n    validation(value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid    \r\n        rows={data}\r\n        columns={columns}\r\n      >\r\n          <EditingState\r\n            editingRowIds={editingRowIds}\r\n            onEditingRowIdsChange={setEditingRowIds}\r\n            onRowChangesChange={onEdited}\r\n            deletedRowIds={deletedRowIds}\r\n            onDeletedRowIdsChange={setDeletedRowIds}\r\n            onCommitChanges={commitChanges}\r\n            onAddedRowsChange={changeAddedRows}\r\n            columnExtensions={editingStateColumnExtensions}\r\n          />\r\n        <Table />\r\n        <TableHeaderRow />\r\n        <TableEditRow />\r\n        <TableEditColumn\r\n          cellComponent={props => <EditableCell {...props} errors={errors} />}\r\n          showAddCommand\r\n          showEditCommand\r\n          showDeleteCommand\r\n        />\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nMeasurementGrid.defaultProps = {\r\n  data: [],\r\n}\r\n\r\nMeasurementGrid.propTypes = {\r\n  data: PropTypes.arrayOf(PropTypes.object),\r\n  handleEdit: PropTypes.func.isRequired,\r\n  handleDelete: PropTypes.func.isRequired,\r\n  handleSubmitNew: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default MeasurementGrid\r\n\r\n","import React from 'react';\nimport styled from 'styled-components'\nimport msrmntService from './services/measurements'\nimport useMeasurementsApi from './hooks/useMeasurementsApi';\nimport MeasurementGrid from './components/MeasurementGrid';\n\nconst Container = styled.div`\n  margin-top: 2em\n  display: flex\n  flex: 1 1 auto\n`\n\nconst MainHeader = styled.h2`\n\n`\n\nfunction App() {\n  const [measurements, updateMeasurements] = useMeasurementsApi()\n\n  const handleSubmitNew = async (data) => {\n    await msrmntService.addNew(data)\n    updateMeasurements()\n  }\n\n  const handleDelete = async (msrmnt) => {\n    await msrmntService.del(msrmnt.id)\n    updateMeasurements()\n  }\n\n  const handleEdit = async (measurement) => {\n    await msrmntService.update(measurement)\n    updateMeasurements()\n  }\n\n  return (\n    <Container>\n      <MainHeader>\n        Mittaustietokanta\n      </MainHeader>\n      <MeasurementGrid\n        data={measurements}\n        handleEdit={handleEdit}\n        handleDelete={handleDelete}\n        handleChanges={() => {}}\n        handleSubmitNew={handleSubmitNew}\n      />\n      \n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}